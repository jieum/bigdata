/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package kr.co.jaso.blog.cassandra.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class BlogReply implements TBase<BlogReply, BlogReply._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BlogReply");

  private static final TField USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, (short)1);
  private static final TField REPLY_CONTENT_FIELD_DESC = new TField("replyContent", TType.STRING, (short)2);

  public String userName;
  public ByteBuffer replyContent;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    USER_NAME((short)1, "userName"),
    REPLY_CONTENT((short)2, "replyContent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_NAME
          return USER_NAME;
        case 2: // REPLY_CONTENT
          return REPLY_CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_NAME, new FieldMetaData("userName", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.REPLY_CONTENT, new FieldMetaData("replyContent", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BlogReply.class, metaDataMap);
  }

  public BlogReply() {
  }

  public BlogReply(
    String userName,
    ByteBuffer replyContent)
  {
    this();
    this.userName = userName;
    this.replyContent = replyContent;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlogReply(BlogReply other) {
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetReplyContent()) {
      this.replyContent = ByteBuffer.wrap(new byte[other.replyContent.limit() - other.replyContent.arrayOffset()]);
      System.arraycopy(other.replyContent.array(), other.replyContent.arrayOffset(), replyContent.array(), 0, other.replyContent.limit() - other.replyContent.arrayOffset());
    }
  }

  public BlogReply deepCopy() {
    return new BlogReply(this);
  }

  @Deprecated
  public BlogReply clone() {
    return new BlogReply(this);
  }

  @Override
  public void clear() {
    this.userName = null;
    this.replyContent = null;
  }

  public String getUserName() {
    return this.userName;
  }

  public BlogReply setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been asigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public ByteBuffer getReplyContent() {
    return this.replyContent;
  }

  public BlogReply setReplyContent(ByteBuffer replyContent) {
    this.replyContent = replyContent;
    return this;
  }

  public void unsetReplyContent() {
    this.replyContent = null;
  }

  /** Returns true if field replyContent is set (has been asigned a value) and false otherwise */
  public boolean isSetReplyContent() {
    return this.replyContent != null;
  }

  public void setReplyContentIsSet(boolean value) {
    if (!value) {
      this.replyContent = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case REPLY_CONTENT:
      if (value == null) {
        unsetReplyContent();
      } else {
        setReplyContent((ByteBuffer)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_NAME:
      return getUserName();

    case REPLY_CONTENT:
      return getReplyContent();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case USER_NAME:
      return isSetUserName();
    case REPLY_CONTENT:
      return isSetReplyContent();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlogReply)
      return this.equals((BlogReply)that);
    return false;
  }

  public boolean equals(BlogReply that) {
    if (that == null)
      return false;

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_replyContent = true && this.isSetReplyContent();
    boolean that_present_replyContent = true && that.isSetReplyContent();
    if (this_present_replyContent || that_present_replyContent) {
      if (!(this_present_replyContent && that_present_replyContent))
        return false;
      if (!this.replyContent.equals(that.replyContent))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BlogReply other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BlogReply typedOther = (BlogReply)other;

    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {      lastComparison = TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyContent()).compareTo(typedOther.isSetReplyContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyContent()) {      lastComparison = TBaseHelper.compareTo(this.replyContent, typedOther.replyContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // USER_NAME
          if (field.type == TType.STRING) {
            this.userName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // REPLY_CONTENT
          if (field.type == TType.STRING) {
            this.replyContent = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.userName != null) {
      oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
      oprot.writeString(this.userName);
      oprot.writeFieldEnd();
    }
    if (this.replyContent != null) {
      oprot.writeFieldBegin(REPLY_CONTENT_FIELD_DESC);
      oprot.writeBinary(this.replyContent);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlogReply(");
    boolean first = true;

    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replyContent:");
    if (this.replyContent == null) {
      sb.append("null");
    } else {
      TBaseHelper.toString(this.replyContent, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

