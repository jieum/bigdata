/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package kr.co.jaso.blog.cloudata.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class BlogService {

  public interface Iface extends kr.co.jaso.blog.cloudata.generated.ApplicationService.Iface {

    public void saveBlog(BlogArticle article) throws TException;

    public BlogArticle getBlog(String userId, long articleId) throws BlogException, TException;

    public List<BlogArticle> searchBlogByUserId(String userId) throws BlogException, TException;

  }

  public interface AsyncIface extends kr.co.jaso.blog.cloudata.generated.ApplicationService .AsyncIface {

    public void saveBlog(BlogArticle article, AsyncMethodCallback<AsyncClient.saveBlog_call> resultHandler) throws TException;

    public void getBlog(String userId, long articleId, AsyncMethodCallback<AsyncClient.getBlog_call> resultHandler) throws TException;

    public void searchBlogByUserId(String userId, AsyncMethodCallback<AsyncClient.searchBlogByUserId_call> resultHandler) throws TException;

  }

  public static class Client extends kr.co.jaso.blog.cloudata.generated.ApplicationService.Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public void saveBlog(BlogArticle article) throws TException
    {
      send_saveBlog(article);
    }

    public void send_saveBlog(BlogArticle article) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("saveBlog", TMessageType.CALL, ++seqid_));
      saveBlog_args args = new saveBlog_args();
      args.setArticle(article);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BlogArticle getBlog(String userId, long articleId) throws BlogException, TException
    {
      send_getBlog(userId, articleId);
      return recv_getBlog();
    }

    public void send_getBlog(String userId, long articleId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBlog", TMessageType.CALL, ++seqid_));
      getBlog_args args = new getBlog_args();
      args.setUserId(userId);
      args.setArticleId(articleId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BlogArticle recv_getBlog() throws BlogException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBlog failed: out of sequence response");
      }
      getBlog_result result = new getBlog_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.be != null) {
        throw result.be;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBlog failed: unknown result");
    }

    public List<BlogArticle> searchBlogByUserId(String userId) throws BlogException, TException
    {
      send_searchBlogByUserId(userId);
      return recv_searchBlogByUserId();
    }

    public void send_searchBlogByUserId(String userId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("searchBlogByUserId", TMessageType.CALL, ++seqid_));
      searchBlogByUserId_args args = new searchBlogByUserId_args();
      args.setUserId(userId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<BlogArticle> recv_searchBlogByUserId() throws BlogException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "searchBlogByUserId failed: out of sequence response");
      }
      searchBlogByUserId_result result = new searchBlogByUserId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.be != null) {
        throw result.be;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "searchBlogByUserId failed: unknown result");
    }

  }
  public static class AsyncClient extends kr.co.jaso.blog.cloudata.generated.ApplicationService.AsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void saveBlog(BlogArticle article, AsyncMethodCallback<saveBlog_call> resultHandler) throws TException {
      checkReady();
      saveBlog_call method_call = new saveBlog_call(article, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class saveBlog_call extends TAsyncMethodCall {
      private BlogArticle article;
      public saveBlog_call(BlogArticle article, AsyncMethodCallback<saveBlog_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.article = article;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("saveBlog", TMessageType.CALL, 0));
        saveBlog_args args = new saveBlog_args();
        args.setArticle(article);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void getBlog(String userId, long articleId, AsyncMethodCallback<getBlog_call> resultHandler) throws TException {
      checkReady();
      getBlog_call method_call = new getBlog_call(userId, articleId, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getBlog_call extends TAsyncMethodCall {
      private String userId;
      private long articleId;
      public getBlog_call(String userId, long articleId, AsyncMethodCallback<getBlog_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.articleId = articleId;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getBlog", TMessageType.CALL, 0));
        getBlog_args args = new getBlog_args();
        args.setUserId(userId);
        args.setArticleId(articleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BlogArticle getResult() throws BlogException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBlog();
      }
    }

    public void searchBlogByUserId(String userId, AsyncMethodCallback<searchBlogByUserId_call> resultHandler) throws TException {
      checkReady();
      searchBlogByUserId_call method_call = new searchBlogByUserId_call(userId, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class searchBlogByUserId_call extends TAsyncMethodCall {
      private String userId;
      public searchBlogByUserId_call(String userId, AsyncMethodCallback<searchBlogByUserId_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("searchBlogByUserId", TMessageType.CALL, 0));
        searchBlogByUserId_args args = new searchBlogByUserId_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BlogArticle> getResult() throws BlogException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchBlogByUserId();
      }
    }

  }

  public static class Processor extends kr.co.jaso.blog.cloudata.generated.ApplicationService.Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      super(iface);
      iface_ = iface;
      processMap_.put("saveBlog", new saveBlog());
      processMap_.put("getBlog", new getBlog());
      processMap_.put("searchBlogByUserId", new searchBlogByUserId());
    }

    private Iface iface_;

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class saveBlog implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        saveBlog_args args = new saveBlog_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("saveBlog", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.saveBlog(args.article);
        return;
      }
    }

    private class getBlog implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBlog_args args = new getBlog_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBlog", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBlog_result result = new getBlog_result();
        try {
          result.success = iface_.getBlog(args.userId, args.articleId);
        } catch (BlogException be) {
          result.be = be;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing getBlog", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBlog");
          oprot.writeMessageBegin(new TMessage("getBlog", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBlog", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchBlogByUserId implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        searchBlogByUserId_args args = new searchBlogByUserId_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("searchBlogByUserId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchBlogByUserId_result result = new searchBlogByUserId_result();
        try {
          result.success = iface_.searchBlogByUserId(args.userId);
        } catch (BlogException be) {
          result.be = be;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing searchBlogByUserId", th);
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing searchBlogByUserId");
          oprot.writeMessageBegin(new TMessage("searchBlogByUserId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("searchBlogByUserId", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class saveBlog_args implements TBase<saveBlog_args, saveBlog_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("saveBlog_args");

    private static final TField ARTICLE_FIELD_DESC = new TField("article", TType.STRUCT, (short)1);

    public BlogArticle article;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      ARTICLE((short)1, "article");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ARTICLE
            return ARTICLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ARTICLE, new FieldMetaData("article", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, BlogArticle.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(saveBlog_args.class, metaDataMap);
    }

    public saveBlog_args() {
    }

    public saveBlog_args(
      BlogArticle article)
    {
      this();
      this.article = article;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBlog_args(saveBlog_args other) {
      if (other.isSetArticle()) {
        this.article = new BlogArticle(other.article);
      }
    }

    public saveBlog_args deepCopy() {
      return new saveBlog_args(this);
    }

    @Override
    public void clear() {
      this.article = null;
    }

    public BlogArticle getArticle() {
      return this.article;
    }

    public saveBlog_args setArticle(BlogArticle article) {
      this.article = article;
      return this;
    }

    public void unsetArticle() {
      this.article = null;
    }

    /** Returns true if field article is set (has been asigned a value) and false otherwise */
    public boolean isSetArticle() {
      return this.article != null;
    }

    public void setArticleIsSet(boolean value) {
      if (!value) {
        this.article = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ARTICLE:
        if (value == null) {
          unsetArticle();
        } else {
          setArticle((BlogArticle)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ARTICLE:
        return getArticle();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ARTICLE:
        return isSetArticle();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBlog_args)
        return this.equals((saveBlog_args)that);
      return false;
    }

    public boolean equals(saveBlog_args that) {
      if (that == null)
        return false;

      boolean this_present_article = true && this.isSetArticle();
      boolean that_present_article = true && that.isSetArticle();
      if (this_present_article || that_present_article) {
        if (!(this_present_article && that_present_article))
          return false;
        if (!this.article.equals(that.article))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(saveBlog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      saveBlog_args typedOther = (saveBlog_args)other;

      lastComparison = Boolean.valueOf(isSetArticle()).compareTo(typedOther.isSetArticle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArticle()) {
        lastComparison = TBaseHelper.compareTo(this.article, typedOther.article);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ARTICLE
            if (field.type == TType.STRUCT) {
              this.article = new BlogArticle();
              this.article.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.article != null) {
        oprot.writeFieldBegin(ARTICLE_FIELD_DESC);
        this.article.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBlog_args(");
      boolean first = true;

      sb.append("article:");
      if (this.article == null) {
        sb.append("null");
      } else {
        sb.append(this.article);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlog_args implements TBase<getBlog_args, getBlog_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlog_args");

    private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.STRING, (short)1);
    private static final TField ARTICLE_ID_FIELD_DESC = new TField("articleId", TType.I64, (short)2);

    public String userId;
    public long articleId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER_ID((short)1, "userId"),
      ARTICLE_ID((short)2, "articleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // ARTICLE_ID
            return ARTICLE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ARTICLEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMap.put(_Fields.ARTICLE_ID, new FieldMetaData("articleId", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getBlog_args.class, metaDataMap);
    }

    public getBlog_args() {
    }

    public getBlog_args(
      String userId,
      long articleId)
    {
      this();
      this.userId = userId;
      this.articleId = articleId;
      setArticleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlog_args(getBlog_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      this.articleId = other.articleId;
    }

    public getBlog_args deepCopy() {
      return new getBlog_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      setArticleIdIsSet(false);
      this.articleId = 0;
    }

    public String getUserId() {
      return this.userId;
    }

    public getBlog_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been asigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public long getArticleId() {
      return this.articleId;
    }

    public getBlog_args setArticleId(long articleId) {
      this.articleId = articleId;
      setArticleIdIsSet(true);
      return this;
    }

    public void unsetArticleId() {
      __isset_bit_vector.clear(__ARTICLEID_ISSET_ID);
    }

    /** Returns true if field articleId is set (has been asigned a value) and false otherwise */
    public boolean isSetArticleId() {
      return __isset_bit_vector.get(__ARTICLEID_ISSET_ID);
    }

    public void setArticleIdIsSet(boolean value) {
      __isset_bit_vector.set(__ARTICLEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case ARTICLE_ID:
        if (value == null) {
          unsetArticleId();
        } else {
          setArticleId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case ARTICLE_ID:
        return new Long(getArticleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case ARTICLE_ID:
        return isSetArticleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlog_args)
        return this.equals((getBlog_args)that);
      return false;
    }

    public boolean equals(getBlog_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_articleId = true;
      boolean that_present_articleId = true;
      if (this_present_articleId || that_present_articleId) {
        if (!(this_present_articleId && that_present_articleId))
          return false;
        if (this.articleId != that.articleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBlog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBlog_args typedOther = (getBlog_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArticleId()).compareTo(typedOther.isSetArticleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArticleId()) {
        lastComparison = TBaseHelper.compareTo(this.articleId, typedOther.articleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_ID
            if (field.type == TType.STRING) {
              this.userId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ARTICLE_ID
            if (field.type == TType.I64) {
              this.articleId = iprot.readI64();
              setArticleIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(this.userId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ARTICLE_ID_FIELD_DESC);
      oprot.writeI64(this.articleId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlog_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("articleId:");
      sb.append(this.articleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlog_result implements TBase<getBlog_result, getBlog_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlog_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField BE_FIELD_DESC = new TField("be", TType.STRUCT, (short)1);

    public BlogArticle success;
    public BlogException be;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BE((short)1, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, BlogArticle.class)));
      tmpMap.put(_Fields.BE, new FieldMetaData("be", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getBlog_result.class, metaDataMap);
    }

    public getBlog_result() {
    }

    public getBlog_result(
      BlogArticle success,
      BlogException be)
    {
      this();
      this.success = success;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlog_result(getBlog_result other) {
      if (other.isSetSuccess()) {
        this.success = new BlogArticle(other.success);
      }
      if (other.isSetBe()) {
        this.be = new BlogException(other.be);
      }
    }

    public getBlog_result deepCopy() {
      return new getBlog_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.be = null;
    }

    public BlogArticle getSuccess() {
      return this.success;
    }

    public getBlog_result setSuccess(BlogArticle success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlogException getBe() {
      return this.be;
    }

    public getBlog_result setBe(BlogException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been asigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BlogArticle)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((BlogException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlog_result)
        return this.equals((getBlog_result)that);
      return false;
    }

    public boolean equals(getBlog_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getBlog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getBlog_result typedOther = (getBlog_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new BlogArticle();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // BE
            if (field.type == TType.STRUCT) {
              this.be = new BlogException();
              this.be.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetBe()) {
        oprot.writeFieldBegin(BE_FIELD_DESC);
        this.be.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBlog_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class searchBlogByUserId_args implements TBase<searchBlogByUserId_args, searchBlogByUserId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("searchBlogByUserId_args");

    private static final TField USER_ID_FIELD_DESC = new TField("userId", TType.STRING, (short)1);

    public String userId;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new FieldMetaData("userId", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(searchBlogByUserId_args.class, metaDataMap);
    }

    public searchBlogByUserId_args() {
    }

    public searchBlogByUserId_args(
      String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchBlogByUserId_args(searchBlogByUserId_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public searchBlogByUserId_args deepCopy() {
      return new searchBlogByUserId_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public searchBlogByUserId_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been asigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchBlogByUserId_args)
        return this.equals((searchBlogByUserId_args)that);
      return false;
    }

    public boolean equals(searchBlogByUserId_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchBlogByUserId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchBlogByUserId_args typedOther = (searchBlogByUserId_args)other;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = TBaseHelper.compareTo(this.userId, typedOther.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_ID
            if (field.type == TType.STRING) {
              this.userId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(this.userId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchBlogByUserId_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class searchBlogByUserId_result implements TBase<searchBlogByUserId_result, searchBlogByUserId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("searchBlogByUserId_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField BE_FIELD_DESC = new TField("be", TType.STRUCT, (short)1);

    public List<BlogArticle> success;
    public BlogException be;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BE((short)1, "be");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BE
            return BE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, BlogArticle.class))));
      tmpMap.put(_Fields.BE, new FieldMetaData("be", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(searchBlogByUserId_result.class, metaDataMap);
    }

    public searchBlogByUserId_result() {
    }

    public searchBlogByUserId_result(
      List<BlogArticle> success,
      BlogException be)
    {
      this();
      this.success = success;
      this.be = be;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchBlogByUserId_result(searchBlogByUserId_result other) {
      if (other.isSetSuccess()) {
        List<BlogArticle> __this__success = new ArrayList<BlogArticle>();
        for (BlogArticle other_element : other.success) {
          __this__success.add(new BlogArticle(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBe()) {
        this.be = new BlogException(other.be);
      }
    }

    public searchBlogByUserId_result deepCopy() {
      return new searchBlogByUserId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.be = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BlogArticle> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BlogArticle elem) {
      if (this.success == null) {
        this.success = new ArrayList<BlogArticle>();
      }
      this.success.add(elem);
    }

    public List<BlogArticle> getSuccess() {
      return this.success;
    }

    public searchBlogByUserId_result setSuccess(List<BlogArticle> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public BlogException getBe() {
      return this.be;
    }

    public searchBlogByUserId_result setBe(BlogException be) {
      this.be = be;
      return this;
    }

    public void unsetBe() {
      this.be = null;
    }

    /** Returns true if field be is set (has been asigned a value) and false otherwise */
    public boolean isSetBe() {
      return this.be != null;
    }

    public void setBeIsSet(boolean value) {
      if (!value) {
        this.be = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BlogArticle>)value);
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          setBe((BlogException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BE:
        return getBe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BE:
        return isSetBe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchBlogByUserId_result)
        return this.equals((searchBlogByUserId_result)that);
      return false;
    }

    public boolean equals(searchBlogByUserId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_be = true && this.isSetBe();
      boolean that_present_be = true && that.isSetBe();
      if (this_present_be || that_present_be) {
        if (!(this_present_be && that_present_be))
          return false;
        if (!this.be.equals(that.be))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchBlogByUserId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchBlogByUserId_result typedOther = (searchBlogByUserId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBe()).compareTo(typedOther.isSetBe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBe()) {
        lastComparison = TBaseHelper.compareTo(this.be, typedOther.be);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list4 = iprot.readListBegin();
                this.success = new ArrayList<BlogArticle>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  BlogArticle _elem6;
                  _elem6 = new BlogArticle();
                  _elem6.read(iprot);
                  this.success.add(_elem6);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // BE
            if (field.type == TType.STRUCT) {
              this.be = new BlogException();
              this.be.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (BlogArticle _iter7 : this.success)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetBe()) {
        oprot.writeFieldBegin(BE_FIELD_DESC);
        this.be.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchBlogByUserId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("be:");
      if (this.be == null) {
        sb.append("null");
      } else {
        sb.append(this.be);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
